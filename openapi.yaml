openapi: 3.0.1

info:
  title: MageStack API
  version: "1.0.0"
  description: |
    Bem-vindo √† MageStack API üîÆ

    Esta API facilita a cria√ß√£o, gerenciamento e compartilhamento de decks de Magic: The Gathering.
    Funcionalidades:
      - Cadastro e autentica√ß√£o de usu√°rios
      - CRUD de decks (criar, ler, atualizar, deletar)
      - Adi√ß√£o e remo√ß√£o de cartas em decks
      - Curtidas e coment√°rios nos decks
      - Estat√≠sticas de uso

  contact:
    name: Reposit√≥rio GitHub
    email: contato@magestack.com
    url: https://github.com/alanerochaa/MageStack-API

  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT



# Os servidores de onde a API pode ser acessada
servers:
  - url: http://localhost:8080/api
    description: Servidor local de desenvolvimento
  - url: https://api.mtgdeckbuilder.com
    description: Servidor de produ√ß√£o

# Os endpoints por categoria
tags:
  - name: Decks
    description: Opera√ß√µes de gerenciamento de decks
  - name: Cartas
    description: Opera√ß√µes relacionadas √†s cartas
  - name: Usu√°rios
    description: Cadastro e perfil de usu√°rios
  - name: Autentica√ß√£o
    description: Login, logout e refresh de token
  - name: Coment√°rios
    description: Coment√°rios em decks
  - name: Curtidas
    description: Curtidas em decks
  - name: Estat√≠sticas
    description: Relat√≥rios e m√©tricas da plataforma

# Defini√ß√£o das rotas 
paths:
  /decks:
    get:
      summary: Listar todos os decks
      tags: [Decks]
      responses:
        '200':
          description: Lista de decks retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeckDTO'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Criar um novo deck
      tags: [Decks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeckCreateDTO'
      responses:
        '201':
          description: Deck criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /decks/{id}:
    # Par√¢metro que ajuda a identificar o deck
    parameters:
      - $ref: '#/components/parameters/DeckId'
    get:
      summary: Obter um deck pelo ID
      tags: [Decks]
      responses:
        '200':
          description: Deck encontrado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckDTO'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Atualizar um deck existente
      tags: [Decks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeckUpdateDTO'
      responses:
        '200':
          description: Deck atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Remover um deck
      tags: [Decks]
      responses:
        '204':
          description: Deck removido com sucesso (sem conte√∫do)
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # ... Aqui voc√™ continua adicionando as demais rotas (/cartas, /usuarios, /comentarios, etc.)
  # at√© ter no m√≠nimo 20 endpoints documentados.

# Defini√ß√µes reutiliz√°veis para par√¢metros, respostas e esquemas
components:

  # Esquemas de autentica√ß√£o (se aplic√°vel)
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # Par√¢metros globais
  parameters:
    DeckId:
      name: id
      in: path
      description: ID do deck
      required: true
      schema:
        type: integer

  # Respostas de erro padr√£o
  responses:
    BadRequest:
      description: Requisi√ß√£o inv√°lida (400)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErroDTO'
    NotFound:
      description: Recurso n√£o encontrado (404)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErroDTO'
    InternalError:
      description: Erro interno do servidor (500)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErroDTO'
    Unauthorized:
      description: N√£o autorizado (401)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErroDTO'

  schemas:
    # DTO principal de Deck
    DeckDTO:
      type: object
      properties:
        id:
          type: integer  # Identificador √∫nico
        nome:
          type: string   # Nome dado ao deck
        formato:
          type: string   # Formato do deck (ex: Commander, Standard)
        descricao:
          type: string   # Descri√ß√£o detalhada do deck
        usuarioId:
          type: integer  # ID do usu√°rio criador
        publico:
          type: boolean  # Se o deck √© p√∫blico ou privado
        dataCriacao:
          type: string
          format: date-time  # Data e hora de cria√ß√£o (ISO 8601)
        cartas:
          type: array
          items:
            $ref: '#/components/schemas/CartaDTO'
        comentarios:
          type: array
          items:
            $ref: '#/components/schemas/ComentarioDTO'
      required: [id, nome, formato, dataCriacao]  # Campos obrigat√≥rios

    # DTO para criar um novo deck
    DeckCreateDTO:
      type: object
      properties:
        nome:
          type: string
        formato:
          type: string
        descricao:
          type: string
        publico:
          type: boolean
      required: [nome, formato]

    # DTO para atualiza√ß√£o de deck (sem ID)
    DeckUpdateDTO:
      type: object
      properties:
        nome:
          type: string
        formato:
          type: string
        descricao:
          type: string
        publico:
          type: boolean
      required: [nome, formato]

    # DTO de Carta
    CartaDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        tipo:
          type: string
        cor:
          type: string
        custoMana:
          type: string
        quantidade:
          type: integer
      required: [id, nome, quantidade]

    # DTO de Coment√°rio
    ComentarioDTO:
      type: object
      properties:
        id:
          type: integer
        usuarioId:
          type: integer
        mensagem:
          type: string
        dataComentario:
          type: string
          format: date-time
      required: [id, usuarioId, mensagem]

    # DTO para criar coment√°rio (sem ID)
    ComentarioCreateDTO:
      type: object
      properties:
        usuarioId:
          type: integer
        mensagem:
          type: string
      required: [usuarioId, mensagem]

    # DTO de Usu√°rio
    UsuarioDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        email:
          type: string
          format: email
        decksCriados:
          type: integer
        dataCadastro:
          type: string
          format: date-time
      required: [id, nome, email]

    # DTO para criar usu√°rio (com senha)
    UsuarioCreateDTO:
      type: object
      properties:
        nome:
          type: string
        email:
          type: string
          format: email
        senha:
          type: string
      required: [nome, email, senha]

    # DTO para autentica√ß√£o (login)
    AuthRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        senha:
          type: string
      required: [email, senha]

    # DTO para refresh de token
    AuthRefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required: [refreshToken]

    # DTO de resposta de autentica√ß√£o
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      required: [accessToken, refreshToken]

    # DTO de erro padr√£o
    ErroDTO:
      type: object
      properties:
        codigo:
          type: integer
        mensagem:
          type: string
        detalhes:
          type: string
        timestamp:
          type: string
          format: date-time
      required: [codigo, mensagem]
